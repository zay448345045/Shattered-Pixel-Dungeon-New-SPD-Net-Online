// 把Evan的apply plugin换成使用更好的Plugins代码块
plugins {
    id 'com.android.application'

    // 添加获取调试信息用的Firebase
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}


android {
    namespace 'com.shatteredpixel.shatteredpixeldungeon.android'
    compileSdk appAndroidCompileSDK
    compileOptions.sourceCompatibility = compileOptions.targetCompatibility = appJavaCompatibility

compileOptions {
        sourceCompatibility JavaVersion.VERSION_23
        targetCompatibility JavaVersion.VERSION_23
    }

    sourceSets.main.assets.srcDirs = [new File(project(':core').projectDir, "/src/main/assets")]

    defaultConfig {
        manifestPlaceholders = [appName:appName]
        applicationId appPackageName

        versionCode appVersionCode
        // Net的版本号
        versionName appVersionName + '}' + appNetVersionName

        // 启用多dex以突破64k数量限制
        multiDexEnabled true

        //noinspection MinSdkTooLow
        minSdkVersion appAndroidMinSDK
        targetSdkVersion appAndroidTargetSDK
        resourceConfigurations += ['en_US', 'cs', 'de', 'el', 'es', 'fr', 'hu', 'in', 'it', 'ja', 'ko', 'nl', 'pl', 'pt', 'ru', 'tr', 'uk', 'vi', 'zh_CN']

    }

    // 更改以不使用R8
    // R8优化很好, 但是需要保存mapping文件才能debug
    // 很烂 >:(
    buildTypes {
        debug {
            versionNameSuffix '-INDEV'
        }
        release {
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    // 添加这个防止依赖冲突
    packagingOptions {
        pickFirst 'META-INF/DEPENDENCIES'
    }
}

configurations { natives }

dependencies {
    implementation project(':core')

    // Evan为了保证安卓4.4以下的兼容性只能用LibGdx1.11.0
    // 但是我们都用Firebase了 :D minSdkVersion早就是19了
    // 直接上1.12!
    implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:1.12.1:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:1.12.1:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:1.12.1:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:1.12.1:natives-x86_64"
    implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:1.12.1:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:1.12.1:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:1.12.1:natives-x86"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:1.12.1:natives-x86_64"
    implementation "com.badlogicgames.gdx-controllers:gdx-controllers-android:$gdxControllersVersion"

    // Firebase的依赖库
    implementation platform('com.google.firebase:firebase-bom:32.8.1')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics'

    // 使用自己的更新
    // implementation project(':services:updates:githubUpdates')
    implementation project(':services:news:shatteredNews')

    // 应用更新库
    implementation 'com.github.jenly1314.AppUpdater:app-updater:1.2.0'

    // 启用多dex以突破64k数量限制
    implementation "androidx.multidex:multidex:2.0.1"
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    doFirst {
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86/").mkdirs()
        file("libs/x86_64/").mkdirs()

        configurations.natives.copy().files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.matching { it.name.contains("merge") && it.name.contains("JniLibFolders") }.configureEach { packageTask ->
    packageTask.dependsOn 'copyAndroidNatives'
}